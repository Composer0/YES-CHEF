@page "/mealRecipe/{Index:int}"
@* give parameter to page *@
@using Bard.Shared;
@using System.Text.Json;
@using System.Web;
@inject HttpClient Http;
@inject NavigationManager Navigation;

@if (loaded == true)
{
	
<div class="container mt-5 h-100">
	<div class="d-flex flex-column flex-lg-row justify-content-start">
		<div class="text-center text-lg-start">
				<img src="@recipeImageURL" class="rounded-3 recipeImage animate__animated animate__fadeIn" />
		</div>
			<div class="flex-grow-1 px-3 animate__animated animate__fadeInDown">
			<h1 class="fw-bold">@recipe.title</h1>
			<p>@recipe.summary</p>
		</div>
	</div>

		<div class="row row-cols-1 row-cols-md-2 animate__animated animate__fadeInUp">
		<div class="col mt-3">
			<h2>ingredients</h2>
				<ul>
					@foreach (var item in recipe.ingredients)
					{
						<li>@item</li>
					}
				</ul>
		</div>
		<div class="col">
			<h2>instructions</h2>
				<ul>
					@foreach (var item in recipe.instructions)
					{
						<li>@item</li>
					}
				</ul>
		</div>
	</div>
	@* <h3>MealRecipe</h3> *@
	@* <p>Idea Index = @Index</p> *@
	@* <p>Recipe title = @title</p> *@
	</div>
} else
{
	@* <div class="container"> *@
		@* <p>Loading...</p> *@
		<ChefSpinner></ChefSpinner>
	@* </div> *@
}



@code {

    [CascadingParameter]
    private RecipeState? recipeState { get; set; }
    // already defined



    [Parameter]
    public int Index { get; set; }
    bool loaded = false;
    // ensures all data is loaded before rendrered.

    private string title;
    private string recipeImageURL = "";
    private Recipe recipe;

    protected override void OnInitialized()
    {
        loaded = false;
        getRecipe();
    }

    private async void getRecipe()
    {
        string baseuri = "Recipe/GetRecipe";

        try
        {
            title = recipeState.Ideas.FirstOrDefault(i => i.index == Index).title;

			RecipeParms recipeParms = new RecipeParms()
				{
					MealTime = recipeState.MealTime,
					Ingredients = recipeState.Ingredients,
					SelectedIdea = title
				};

			// get recipe image
			HttpResponseMessage responseImage = await Http.GetAsync($"Recipe/GetRecipeImage?title={HttpUtility.UrlEncode(title)}");
			var recipeImage = await responseImage.Content.ReadFromJsonAsync<RecipeImage>();
			recipeImageURL = recipeImage!.data[0]!.url;

			//get the recipe
			HttpResponseMessage responseRecipe = await Http.PostAsJsonAsync(baseuri, recipeParms);

			responseRecipe.EnsureSuccessStatusCode();

			recipe = (await responseRecipe.Content.ReadFromJsonAsync< Recipe>())!;

			loaded = true;
			StateHasChanged();
		}
		catch
		{
			Console.WriteLine("Error: Could not generate recipe");
		}


	}
}
