@page "/MealIdeas"
@using Bard.Shared
@using System.Text.Json
@inject NavigationManager navigationManager;
@inject HttpClient Http;
@* all for the sending out of api requests. *@


@if (loaded == true)
{
	<div class="container">
		<h3 class="mt-5"3>Pick a meal to make</h3>
		<div class="list-group">
			@foreach (var idea in ideas)
			{
				<button class="list-group-item list-group-action list-group-item-success p-2">
					<div class="d-flex w-100 justify-content-in-between">
						<h2 class="mb-1 fw-bold">@idea.title</h2>
					</div>
						<p class="mb-1" style="text-align: left;">@idea.description</p>
				</button>
			}
		</div>
	</div>
} 
else 
{
	<div class="container">
		<p>Loading...</p>

	</div>
}

@code {
	private List<Idea> ideas = new List<Idea>();
	private bool loaded = false;
	[CascadingParameter]
	private RecipeState rState { get; set; }
	private readonly JsonSerializerOptions _jsonOptions = new()
		{
			PropertyNameCaseInsensitive = true,
			PropertyNamingPolicy = JsonNamingPolicy.CamelCase, DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
		};

	protected override void OnInitialized()
	{
		if (rState is null)
		{
			navigationManager.NavigateTo("/", forceLoad: true);
			return;
		}

		if (rState.Ideas.Count<1)
		{
			GetIdeas();
		}
		else
		{
			loaded = true;
			ideas = rState.Ideas;
			StateHasChanged();					
		};

	}

	private async void GetIdeas()
	{
		string baseuri = "Recipe/GetRecipeIdeas";
		loaded = false;

		RecipeParms recipeParms = new RecipeParms()
			{
				MealTime = rState.MealTime,
				Ingredients = rState.Ingredients
			};


		// GetRecipeIdeas is the name of the function within the RecipeController.
		// call webp api controller. For testing you must create a sampleData model for the created controller to reference.

		try {
			HttpResponseMessage response = await Http.PostAsJsonAsync(baseuri, recipeParms, _jsonOptions);
			//standard call to web api endpoint.

			response.EnsureSuccessStatusCode();

			ideas = (await response.Content.ReadFromJsonAsync<List<Idea>>()!);
			//read the json while applying/sorting that information into the preexisting classes we are using. If it is reading the json and it is not of the type of List<Idea> it will throw an error and move towards catch.

			rState.Ideas = ideas;
			loaded = true;
			StateHasChanged();
		}
		catch {
			Console.WriteLine("Error: could not fetch data.");
		}


	}

}
